

python script that adds FEN strings of chess positions to youtube timestamps. This was part of the data gathering code I used awhile back for an app that recommends chess books and videos. The app has since been overshadowed by the excellent https://chessvision.ai/. Consequently, I've decided to open source some of my code.

Attention:
This repo uses git lfs which I find a little confusing. To re-run on my machine I did the following:
1. make a directory called youtube-to-fen-clone
2. navigate to that directory and run git lfs install
3. clone the repo: git clone https://github.com/nkinney06/youtube-to-fen.git
4. navigate to youtube-to-fen directory and run the timestamp.py script (see below)

Not a bug:
You will always get an FEN string regardless of if a board is present in the frame or not. This is because a single frame in the middle of the video is used as a template to locate the board and used throughout the video; i.e. board detection is not performed on every frame. This speeds up the extraction but returns a bogus FEN when no board is present. For my purpose this was not a problem.

Python version:
Python 3.9.13 (main, May 23 2022, 22:02:02)
[GCC 7.5.0] on linux

Packages:
os
numpy==1.22.4
opencv-python==4.5.5.62
pillow==9.0.1
tensorflow==2.9.0
keras==2.9.0
scipy==1.8.1
pytube==15.0.0
shutil
chess==1.9.1
collections
glob
re
sys

Usage:
Supply a youtube URL as a command line argument. Example: https://www.youtube.com/watch?v=0yopom_euo8. Fen strings can be added to the timestamps as follows.
python timestamps.py https://www.youtube.com/watch?v=0yopom_euo8

Output:
A dataframe with five columns per line:
column1: alpha-numeric title of the video (special characters are stripped)
column2: channel of the video
column3: youtube timestamp
column4: zobrist hash key from white's perspective without ep square or castling rights. Basically this is a unique number assigned to each position.
column5: fen string from whites perspective without ep square, castling rights, full move count, or half move count. These are hard to extract from the video and typically not necessary for research purposes.

example output:
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=0s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=1s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=2s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=3s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=4s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=5s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=6s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=7s        4937601533023818264     2rqkb1r/pp3ppp/8/5b2/3pn3/N7/PPP2QPP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=8s        1493745903597334173     2rqkb1r/pp3ppp/8/5Q2/3pn3/N7/PPP3PP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=9s        1493745903597334173     2rqkb1r/pp3ppp/8/5Q2/3pn3/N7/PPP3PP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=10s       1493745903597334173     2rqkb1r/pp3ppp/8/5Q2/3pn3/N7/PPP3PP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=11s       1493745903597334173     2rqkb1r/pp3ppp/8/5Q2/3pn3/N7/PPP3PP/R3KB1R w - - 0 1
THE_GREATEST_SUB_BATTLE_CLIP_OF_ALL_TIME        GMHikaru_Clips  https://www.youtube.com/watch?v=0yopom_euo8&t=12s       1493745903597334173     2rqkb1r/pp3ppp/8/5Q2/3pn3/N7/PPP3PP/R3KB1R w - - 0 1
...

NOTES:
1. If there is no chessboard in the video frame the script will still try to output an FEN. For my purposes this didn't matter.
2. I will release the training data and neural network training scripts in a seperate repo. Check back for updates.
3. There are some novelties in the script, if you use it extensively please give me a shout out or hire me if I'm unemployed.
4. It's fairly trivial to output an entire channel or playlist.
5. The script runs slow. Could easily be sped up but its trivial to run in parallel for outputting a large dataset.
6. If you're looking for timestamped FENs for a specific channel I might have them, feel free to send me a DM. 
